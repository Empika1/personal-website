data=[25,19477,26,19477,27,19477,28,19477,29,19477,30,19477,31,19477,32,19477,33,19477,34,19477,35,19477,36,19477,37,19477,38,19477,39,19477,40,19477,41,19477,42,19477,43,19477,44,19477,45,19477,46,19477,47,19477,48,19477,49,19477,50,19477,51,19477,52,19477,53,19477,54,19477,55,19477,56,19477,57,19477,58,19477,59,19477,60,19477,61,19477,62,19477,63,19477,64,19477,65,19477,66,19477,67,19477,68,19477,69,19477,70,19477,71,19477,72,19477,73,19477,74,19477,75,19477,76,19477,77,19477,78,19477,79,19477,80,19477,81,19477,82,19477,83,19477,84,19477,85,19477,86,19477,87,19477,88,19477,89,19477,90,19477,91,19477,92,19477,93,19477,94,19477,95,19477,97,19477,98,19477,99,19477,100,19477,101,19477,102,19477,103,19477,104,19477,105,19477,106,19477,107,19477,108,19477,109,19477,110,19477,111,19477,112,19477,113,19477,114,19477,115,19297,116,19087,117,18937,118,18607,119,18157,120,17497,121,17047,122,16837,123,16387,124,16207,125,16117,126,15967,127,15847,128,15487,129,15247,130,15007,131,14827,132,14557,133,14401,134,14251,135,14216,136,14091,137,14001,138,13851,139,13791,140,13761,141,13701,142,13641,143,13551,144,13551,145,13551,146,13491,147,13371,148,13311,149,13221,150,13221,151,13036,152,13006,153,12976,154,12976,155,12946,156,12856,157,12826,158,12826,159,12826,160,12766,161,12766,162,12736,163,12736,164,12706,165,12671,166,12671,167,12611,169,12581,170,12551,171,12551,172,12521,173,12521,174,12491,175,12461,176,12461,177,12431,179,12341,180,12281,181,12251,182,12161,183,12161,184,12131,185,12131,186,12071,187,12071,188,12011,189,12011,190,11981,192,11981,193,11891,195,11891,196,11891,197,11891,198,11891,199,11891,200,11891,201,11891,202,11861,203,11861,204,11801,205,11801,206,11801,207,11801,208,11771,209,11741,210,11741,211,11741,212,11711,213,11681,215,11651,216,11615,217,11615,219,11555,220,11555,221,11497,223,11467,225,11437,226,11400,227,11334,228,11244,229,11184,230,11154,231,11124,232,11124,233,10998,234,10998,235,10998,236,10968,237,10879,238,10720,240,10595,242,10507,243,10507,244,10448,245,10358,247,10359,248,10330,250,10175,252,9996,254,9877,256,9848,257,9848,259,9789,260,9790,262,9761,264,9629,265,9565,266,9535,267,9508,268,9382,269,9323,270,9257,271,9228,273,9062,275,9063,276,9033,277,9004,279,8855,280,8855,281,8792,282,8667,283,8578,284,8579,286,8545,287,8485,288,8421,289,8421,290,8392,291,8326,292,8297,293,8178,295,8112,296,8083,297,8053,298,8054,300,7995,302,7966,303,7966,304,7937,305,7937,306,7938,307,7908,308,7879,309,7879,310,7844,311,7712,312,7683,313,7653,314,7654,315,7618,317,7530,319,7471,320,7340,321,7341,322,7311,323,7312,325,7283,326,7217,327,7152,328,7152,329,7123,331,7124,332,7094,334,7035,335,7006,336,7007,338,6920,339,6920,340,6921,342,6856,343,6790,344,6791,345,6791,346,6762,347,6762,349,6763,351,6728,353,6692,355,6634,356,6604,357,6545,358,6545,360,6518,361,6519,363,6490,364,6490,366,6455,368,6396,369,6397,371,6398,373,6368,375,6338,376,6338,378,6278,380,6248,381,6248,383,6212,385,6182,386,6182,387,6182,388,6182,389,6182,390,6182,391,6152,392,6152,394,6094,395,6094,396,6094,397,6095,398,6035,399,6005,401,5975,403,5939,404,5939,405,5939,406,5939,407,5909,408,5909,409,5909,411,5909,412,5909,413,5909,414,5909,415,5909,416,5909,417,5879,418,5849,419,5849,420,5849,421,5849,422,5849,423,5782,424,5782,425,5752,426,5752,427,5752,428,5752,429,5722,430,5722,431,5693,432,5693,434,5663,435,5663,436,5663,437,5627,438,5627,440,5592,442,5592,443,5555,444,5555,445,5555,447,5495,449,5435,451,5345,453,5309,454,5309,455,5309,456,5309,457,5279,458,5249,459,5249,460,5249,461,5249,462,5249,463,5249,464,5213,465,5213,466,5213,467,5183,469,5183,470,5183,471,5183,472,5183,473,5183,474,5146,475,5146,476,5146,477,5146,478,5146,480,5146,482,5146,483,5146,484,5146,485,5146,486,5116,488,5116,490,5086,491,5056,492,5056,493,5056,494,5056,495,5056,496,5056,497,5056,498,5026,500,5026,501,5026,502,5026,503,5026,504,5026,505,5026,506,5026,507,5026,508,5026,509,4996,510,4996,511,4996,512,4960,514,4960,515,4960,516,4930,517,4900,518,4900,519,4900,520,4900,521,4870,522,4870,523,4870,524,4870,525,4870,526,4870,527,4870,529,4870,530,4870,531,4870,532,4870,533,4840,534,4840,535,4840,536,4840,537,4810,538,4810,539,4810,540,4810,541,4774,542,4774,543,4744,544,4744,545,4744,546,4714,547,4714,548,4714,549,4679,550,4679,551,4679,552,4679,553,4679,554,4679,555,4649,556,4649,557,4649,558,4649,559,4649,560,4649,561,4649,562,4649,563,4649,564,4649,565,4649,566,4649,567,4649,568,4649,569,4649,570,4649,571,4649,572,4649,573,4649,574,4649,575,4649,576,4649,577,4649,578,4649,579,4619,580,4619,581,4619,582,4619,583,4589,584,4589,585,4500,586,4500,587,4500,589,4500,590,4500,591,4500,592,4500,593,4500,595,4470,597,4470,598,4470,599,4470,601,4470,603,4470,604,4440,605,4440,606,4440,607,4440,608,4440,609,4440,610,4440,611,4440,612,4440,613,4440,614,4440,615,4440,617,4410,618,4410,619,4410,620,4410,622,4410,624,4380,625,4380,627,4382,628,4352,629,4352,630,4352,632,4352,633,4352,634,4352,635,4322,636,4322,637,4322,638,4322,639,4322,640,4322,641,4860,642,4860,643,4860,645,4794,646,4794,648,4794,650,4757,651,4757,652,4757,654,4757,655,4757,656,4757,657,4757,658,4757,659,4721,660,4685,661,4685,663,4685,664,4685,666,4655,667,4655,668,4655,669,4655,670,4655,672,4625,673,4625,675,4625,676,4625,678,4625,680,4595,682,4565,683,4565,684,4565,685,4565,687,4565,688,4565,689,4535,690,4535,691,4535,693,4535,695,4535,696,4535,697,4500,698,4500,699,4500,700,4500,701,4470,702,4470,703,4470,704,4470,705,4470,706,4470,707,4470,708,4470,709,4470,711,4470,712,4470,713,4470,714,4470,716,4470,718,4410,720,4410,723,4410,725,4380,728,4350,730,4350,732,4350,734,4350,737,4350,739,4350,741,4320,743,4320,744,4320,746,4320,748,4320,749,4320,750,4320,751,4320,752,4290,754,4290,755,4290,757,4290,759,4260,760,4260,762,4260,764,4260,765,4260,767,4260,768,4260,770,4260,772,4230,774,4230,775,4230,777,4230,779,4230,780,4230,781,4230,782,4230,783,4230,784,4230,786,4230,788,4230,789,4230,791,4230,792,4230,794,4230,795,4230,797,4170,798,4170,799,4170,800,4170,802,4140,803,4140,804,4140,805,4140,806,4140,807,4140,808,4140,809,4140,810,4140,811,4140,812,4140,814,4140,816,4110,817,4110,819,4110,821,4110,823,4110,825,4110,827,4110,828,4110,829,4110,831,4110,832,4110,834,4112,835,4082,836,4082,837,4082,838,4082,839,4082,841,4082,843,4082,844,4082,845,4082,846,4082,847,4082,848,4082,849,4082,850,4082,851,4082,852,4082,853,4082,854,4082,855,4082,856,4082,857,4082,858,4082,859,4082,861,4082,862,4052,863,4052,864,4052,865,4022,866,4022,867,4022,868,4022,869,4022,870,4022,871,4022,872,4022,873,4022,874,4022,875,4022,876,4022,877,4022,878,4022,879,4022,881,4022,883,4022,884,4022,885,4022,886,4022,887,4022,888,4022,889,4022,890,4022,891,4022,892,4022,893,4022,894,4022,895,4022,896,4022,897,4022,898,4022,899,4022,900,4022,901,4022,902,4022,903,4022,904,4022,905,4022,906,4022,907,4022,908,4022,909,3992,910,3992,911,3992,912,3992,913,3992,914,3992,916,3992,917,3992,918,3992,919,3992,920,3992,921,3955,922,3955,923,3955,924,3955,925,3955,926,3955,927,3955,928,3955,929,3955,930,3955,931,3955,932,3955,933,3955,934,3955,935,3955,936,3955,937,3955,938,3955,939,3955,940,3955,941,3955,942,3955,943,3955,944,3955,945,3955,946,3955,947,3955,948,3955,949,3955,950,3955,951,3955,952,3925,953,3925,954,3925,956,3925,957,3925,958,3925,959,3925,960,3925,962,3925,964,3889,965,3889,966,3889,967,3889,968,3889,970,3889,971,3889,972,3889,974,3889,975,3889,976,3889,977,3889,978,3889,980,3889,981,3889,982,3889,983,3889,984,3889,985,3889,986,3889,987,3889,988,3889,989,3889,990,3889,991,3889,992,3889,993,3889,994,3889,995,3889,996,3889,997,3859,998,3859,999,3859,1000,3859,1001,3859,1002,3859,1003,3859,1004,3859,1005,3859,1006,3859,1007,3859,1008,3859,1009,3859,1010,3859,1011,3859,1012,3859,1013,3859,1015,3859,1016,3859,1018,3859,1019,3859,1020,3859,1021,3859,1022,3859,1023,3859,1024,3859,1025,3859,1026,3859,1027,3859,1028,3859,1029,3859,1030,3859,1031,3859,1032,3859,1033,3859,1034,3859,1035,3859,1036,3859,1037,3859,1038,3859,1039,3829,1040,3829,1041,3829,1042,3829,1043,3829,1044,3829,1045,3829,1046,3829,1047,3829,1048,3829,1049,3829,1050,3829,1051,3829,1052,3829,1053,3829,1054,3829,1055,3829,1056,3829,1057,3829,1058,3829,1059,3829,1060,3799,1061,3799,1062,3799,1063,3799,1064,3799,1065,3799,1067,3799,1068,3799,1069,3799,1070,3799,1071,3799,1072,3799,1073,3799,1074,3799,1075,3799,1076,3799,1077,3799,1078,3799,1080,3799,1081,3799,1083,3799,1084,3799,1085,3799,1086,3799,1087,3799,1088,3799,1089,3799,1090,3799,1091,3799,1092,3799,1093,3799,1094,3799,1095,3799,1096,3799,1097,3799,1098,3799,1099,3799,1100,3799,1101,3799,1102,3799,1103,3799,1104,3799,1105,3799,1106,3799,1107,3799,1108,3799,1109,3799,1110,3799,1111,3799,1112,3799,1113,3799,1114,3799,1115,3799,1116,3799,1117,3799,1118,3799,1119,3799,1120,3799,1121,3799,1122,3799,1123,3799,1124,3799,1125,3799,1126,3799,1127,3799,1128,3799,1129,3799,1130,3799,1131,3799,1132,3799,1133,3799,1134,3799,1135,3799,1136,3799,1137,3799,1138,3799,1139,3799,1140,3799,1141,3799,1142,3799,1143,3799,1144,3799,1145,3799,1146,3799,1147,3799,1148,3799,1149,3799,1150,3799,1151,3799,1152,3799,1153,3799,1154,3799,1155,3799,1156,3799,1157,3799,1158,3799,1159,3799,1160,3799,1161,3799,1162,3799,1163,3799,1164,3799,1165,3799,1166,3799,1167,3799,1168,3799,1169,3799,1170,3799,1171,3799,1172,3799,1173,3799,1174,3799,1175,3799,1176,3799,1177,3799,1179,3799,1180,3799,1181,3799,1182,3799,1183,3799,1184,3799,1185,3799,1187,3799,1189,3799,1191,3799,1192,3799,1193,3799,1195,3799,1196,3799,1198,3799,1199,3799,1200,3799,1201,3799,1203,3799,1204,3799,1205,3799,1207,3799,1208,3799,1209,3799,1210,3799,1212,3799,1213,3799,1215,3799,1219,3799,1221,3799,1224,3799,1226,3799,1228,3799,1230,3799,1231,3799,1234,3799,1237,3799,1239,3799,1241,3799,1243,3799,1246,3799,1249,3799,1251,3799,1254,3799,1257,3799,1258,3799,1261,3799,1264,3799,1265,3799,1267,3799,1269,3799,1271,3799,1272,3799,1274,3799,1275,3799,1277,3799,1278,3799,1279,3799,1281,3799,1283,3799,1284,3799,1285,3799,1287,3799,1289,3799,1290,3799,1291,3799,1293,3799,1295,3799,1297,3799,1299,3799,1300,3799,1301,3799,1302,3799,1303,3799,1304,3799,1305,3799,1306,3799,1307,3799,1308,3799,1309,3799,1310,3799,1311,3799,1313,3799,1314,3799,1316,3799,1318,3799,1319,3799,1320,3799,1322,3799,1323,3799,1325,3799,1327,3799,1329,3799,1330,3799,1332,3799,1333,3799,1334,3799,1336,3799,1338,3799,1340,3799,1341,3799,1343,3799,1344,3799,1346,3799,1347,3799,1348,3799,1350,3799,1352,3799,1354,3799,1356,3799,1357,3799,1359,3799,1360,3799,1362,3799,1363,3799,1364,3799,1366,3799,1367,3799,1368,3799,1370,3799,1372,3799,1373,3799,1375,3799,1377,3799,1378,3799,1380,3799,1381,3799,1383,3799,1384,3799,1386,3799,1388,3799,1389,3799,1391,3799,1392,3799,1393,3799,1395,3799,1396,3799,1398,3799,1399,3799,1401,3799,1404,3799,1405,3799,1407,3799,1409,3799,1411,3799,1412,3799,1413,3799,1415,3799,1416,3799,1418,3799,1420,3799,1422,3799,1424,3799,1425,3799,1426,3799,1427,3799,1429,3799,1431,3799,1433,3799,1435,3799,1436,3799,1438,3799,1439,3799,1440,3799,1442,3799,1443,3799,1444,3799,1445,3799,1447,3799,1449,3799,1451,3799,1453,3799,1455,3799,1457,3799,1459,3799,1461,3799,1463,3799,1465,3799,1467,3799,1468,3799,1469,3799,1471,3799,1473,3799,1475,3799,1476,3799,1477,3799,1478,3799,1479,3799,1481,3799,1482,3799,1484,3799,1486,3799,1489,3799,1491,3799,1492,3799,1493,3799,1495,3799,1496,3799,1497,3799,1498,3799,1499,3799,1500,3799,1501,3799,1503,3799,1504,3799,1505,3799,1507,3799,1508,3799,1509,3799,1511,3799,1513,3799,1515,3799,1516,3799,1517,3799,1519,3799,1521,3799,1522,3799,1524,3799,1526,3799,1528,3799,1530,3799,1532,3799,1534,3799,1536,3799,1538,3799,1539,3799,1541,3799,1542,3799,1543,3799,1545,3799,1547,3799,1549,3799,1550,3799,1551,3799,1553,3799,1554,3799,1555,3799,1556,3799,1557,3799,1559,3799,1560,3799,1561,3799,1563,3799,1565,3799,1566,3799,1567,3799,1569,3799,1570,3799,1571,3799,1572,3799,1573,3799,1575,3799,1576,3799,1577,3799,1578,3799,1579,3799,1580,3799,1581,3799,1583,3799,1585,3799,1587,3799,1589,3799,1590,3799,1592,3799,1593,3799,1594,3799,1596,3799,1597,3799,1598,3799,1600,3799,1601,3799,1602,3799,1604,3799,1605,3799,1606,3799,1607,3799,1608,3799,1609,3799,1611,3799,1612,3799,1613,3799,1614,3799,1615,3799,1616,3799,1618,3799,1619,3799,1621,3799,1622,3799,1624,3799,1625,3799,1626,3799,1627,3799,1628,3799,1629,3799,1630,3799,1632,3799,1633,3799,1634,3799,1635,3799,1636,3799,1637,3799,1638,3799,1639,3799,1640,3799,1642,3799,1643,3799,1644,3799,1645,3799,1647,3799,1649,3799,1650,3799,1652,3799,1654,3799,1656,3799,1658,3799,1660,3799,1662,3799,1663,3799,1665,3799,1667,3799,1669,3799,1670,3799,1671,3799,1672,3799,1674,3799,1675,3799,1676,3799,1677,3799,1679,3799,1680,3799,1682,3799,1683,3799,1684,3799,1685,3799,1686,3799,1687,3799,1688,3799,1689,3799,1690,3799,1691,3799,1692,3799,1693,3799,1694,3799,1695,3799,1696,3799,1697,3799,1698,3799,1699,3799,1700,3799,1701,3799,1702,3799,1703,3799,1704,3799,1705,3799,1706,3799,1707,3799,1708,3799,1709,3799,1710,3799,1711,3799,1712,3799,1713,3799,1714,3799,1715,3799,1716,3799,1717,3799,1718,3799,1719,3799,1720,3799,1721,3799,1722,3799,1723,3799,1724,3799,1726,3799,1727,3799,1728,3799,1730,3799,1731,3799,1734,3799,1735,3799,1736,3799,1737,3799,1738,3799,1739,3799,1740,3799,1741,3799,1742,3799,1743,3799,1744,3799,1745,3799,1746,3799,1747,3799,1748,3799,1749,3799,1750,3799,1751,3799,1752,3799,1753,3799,1754,3799,1755,3799,1756,3799,1757,3799,1758,3799,1759,3799,1760,3799,1761,3799,1762,3799,1763,3799,1764,3799,1765,3799,1766,3799,1767,3799,1768,3799,1769,3799,1770,3799,1771,3799,1772,3799,1773,3799,1774,3799,1775,3799,1776,3799,1777,3799,1778,3799,1779,3799,1780,3799,1781,3799,1782,3799,1783,3799,1784,3799,1785,3799,1786,3799,1787,3799,1788,3799,1789,3799,1790,3799,1791,3799,1792,3799,1793,3799,1794,3799,1795,3799,1796,3799,1797,3799,1798,3799,1799,3799,1800,3799,1801,3799,1802,3799,1803,3799,1804,3799,1805,3799,1806,3799,1807,3799,1808,3799,1809,3799,1810,3799,1811,3799,1812,3799,1813,3799,1814,3799,1815,3799,1816,3799,1817,3799,1818,3799,1819,3799,1820,3799,1821,3799,1822,3799,1823,3799,1824,3799,1825,3799,1826,3799,1827,3799,1828,3799,1829,3799,1830,3799,1831,3799,1832,3799,1833,3799,1834,3799,1835,3799,1836,3799,1837,3799,1838,3799,1839,3799,1840,3799,1841,3799,1842,3799,1843,3799,1844,3799,1845,3799,1846,3799]



points = []
for i in range(0, len(data), 2):
    points.append((data[i], data[i+1]))

import numpy as np

def fit_piecewise_linear_above(points, n_segments):
    """
    Fit a piecewise linear function with n_segments above all points.
    Returns breakpoints and (slope, intercept) for each segment.
    """
    points = np.array(sorted(points))
    x_points = points[:, 0]
    y_points = points[:, 1]
    
    # Define breakpoints evenly over x-range
    x_min, x_max = x_points[0], x_points[-1]
    breakpoints = np.linspace(x_min, x_max, n_segments + 1)
    y_values = np.zeros_like(breakpoints)
    
    # Compute y-values at breakpoints to be above all points
    for i in range(n_segments + 1):
        x_bp = breakpoints[i]
        max_y = -np.inf
        for x_p, y_p in points:
            if i == 0 and x_p <= x_bp:
                max_y = max(max_y, y_p)
            elif i == n_segments and x_p >= x_bp:
                max_y = max(max_y, y_p)
            elif 0 < i < n_segments:
                x0, x1 = breakpoints[i-1], breakpoints[i]
                if x0 <= x_p <= x1:
                    max_y = max(max_y, y_p)
        y_values[i] = max_y if max_y != -np.inf else 0
    
    # Compute slopes and intercepts for each segment
    slopes_intercepts = []
    for i in range(n_segments):
        x0, x1 = breakpoints[i], breakpoints[i+1]
        y0, y1 = y_values[i], y_values[i+1]
        slope = (y1 - y0) / (x1 - x0)
        intercept = y0 - slope * x0
        slopes_intercepts.append((slope, intercept))
    
    return breakpoints, slopes_intercepts

# Example usage
breakpoints, slopes_intercepts = fit_piecewise_linear_above(points, n_segments=10)

print("max(", end="")
for si in slopes_intercepts:
    print(f"calc({si[0]*100}vw + {si[1]}px), ", end="")
print(")")

# // 1️⃣ Dictionary to store data
# const viewportBottomMap = {};

# // 3️⃣ Function to get element bottom in pixels
# function getElementBottom(el) {
#   let top = 0;
#   while (el) {
#     top += el.offsetTop;
#     el = el.offsetParent;
#   }
#   return top + $0.offsetHeight;
# }

# // 4️⃣ Live logger
# function logViewportBottom() {
#   const width = window.innerWidth;
#   const bottom = getElementBottom(element);
#   viewportBottomMap[width] = bottom;
# }

# // Run initially
# logViewportBottom();

# // Add resize listener
# window.addEventListener("resize", logViewportBottom);

# // 5️⃣ Function to print dictionary as array of tuples
# function printViewportBottomArray() {
#   const arrayOfTuples = Object.entries(viewportBottomMap)
#     .map(([width, bottom]) => [parseInt(width), bottom])
#     .sort((a, b) => a[0] - b[0]); // sort by width
#   console.log(arrayOfTuples);
#   return arrayOfTuples;
# }